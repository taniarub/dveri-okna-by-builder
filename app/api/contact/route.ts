import { NextRequest, NextResponse } from 'next/server';

export const runtime = 'edge';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞ (—Ç–æ–∫–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –ø—Ä–æ–¥–∞–∫—à–Ω)
const TELEGRAM_BOT_TOKEN = '7974395055:AAEAjacUbgE6cq77I6h_PItbWLyCgbOx1cE';
const TELEGRAM_CHAT_ID = '-1002709982809';

// –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ true –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Telegram)
const DEBUG_MODE = false; // –û—Ç–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω

// –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
const translateOptions = (options: string[]): string => {
  const translations: { [key: string]: string } = {
    'mosquito': '–ú–æ—Å–∫–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞',
    'drain': '–û—Ç–ª–∏–≤',
    'sill': '–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫',
    'none': '–ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ',
    'description': '–û–ø–∏—Å–∞–Ω–∏–µ'
  };
  
  return options.map(option => translations[option] || option).join(", ");
};

// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
const validateContactData = (data: any) => {
  const errors: string[] = [];
  
  if (!data.name || data.name.trim().length < 2) {
    errors.push('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
  }
  
  if (!data.phone || data.phone.trim().length < 10) {
    errors.push('–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤');
  }
  
  return errors;
};

export async function POST(request: NextRequest) {
  try {
    console.log('=== CONTACT FORM SUBMISSION ===');
    console.log('Time:', new Date().toISOString());
    console.log('DEBUG_MODE:', DEBUG_MODE);
    console.log('TELEGRAM_BOT_TOKEN:', TELEGRAM_BOT_TOKEN);
    console.log('TELEGRAM_CHAT_ID:', TELEGRAM_CHAT_ID);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞
    if (request.method !== 'POST') {
      return NextResponse.json(
        { success: false, message: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' },
        { status: 405 }
      );
    }

    // –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    let body;
    try {
      body = await request.json();
    } catch (parseError) {
      console.error('JSON parse error:', parseError);
      return NextResponse.json(
        { success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' },
        { status: 400 }
      );
    }

    const { name, phone, email, message, windows_configuration } = body;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const validationErrors = validateContactData(body);
    if (validationErrors.length > 0) {
      console.error('Validation errors:', validationErrors);
      return NextResponse.json(
        { success: false, message: validationErrors.join(', ') },
        { status: 400 }
      );
    }

    // –í —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
    if (DEBUG_MODE) {
      console.log('=== SUCCESS (DEBUG MODE) ===');
      console.log('Form data validated successfully');
      console.log('Name:', name);
      console.log('Phone:', phone);
      console.log('Email:', email || '–ù–µ —É–∫–∞–∑–∞–Ω');
      console.log('Message:', message || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
      console.log('Windows config:', windows_configuration || '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
      
      return NextResponse.json({ 
        success: true, 
        message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! (—Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ - Telegram –æ—Ç–∫–ª—é—á–µ–Ω)',
        debug: {
          receivedData: {
            name: name.trim(),
            phone: phone.trim(),
            email: email?.trim() || null,
            message: message?.trim() || null,
            windows_configuration: windows_configuration || null
          }
        }
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    let telegramMessage = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*\n\n`;
    
    if (name) telegramMessage += `üë§ *–ò–º—è:* ${name.trim()}\n`;
    if (phone) telegramMessage += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone.trim()}\n`;
    if (email) telegramMessage += `üìß *Email:* ${email?.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
    if (message) telegramMessage += `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${message.trim()}\n`;
    
    if (windows_configuration) {
      let translatedConfiguration = windows_configuration;
      
      // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ü–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
      translatedConfiguration = translatedConfiguration.replace(/mosquito/g, '–ú–æ—Å–∫–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞');
      translatedConfiguration = translatedConfiguration.replace(/drain/g, '–û—Ç–ª–∏–≤');
      translatedConfiguration = translatedConfiguration.replace(/sill/g, '–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫');
      translatedConfiguration = translatedConfiguration.replace(/none/g, '–ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ');
      
      telegramMessage += `\nüè† *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫–æ–Ω:*\n${translatedConfiguration}\n`;
    }

    telegramMessage += `\n‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}`;
    telegramMessage += `\nüåê *IP:* ${request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;

    console.log('=== SENDING TO TELEGRAM ===');
    console.log('Message length:', telegramMessage.length);
    console.log('Telegram URL:', `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000); // 15 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

    const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'User-Agent': 'Dverivokna-Contact-Form/1.0'
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: telegramMessage,
        parse_mode: 'Markdown',
      }),
      signal: controller.signal,
    });

    clearTimeout(timeoutId);

    const telegramResult = await telegramResponse.json();
    console.log('=== TELEGRAM RESPONSE ===');
    console.log('Status:', telegramResponse.status);
    console.log('OK:', telegramResponse.ok);
    console.log('Result:', JSON.stringify(telegramResult, null, 2));

    if (!telegramResponse.ok) {
      throw new Error(`Telegram API error: ${telegramResult.description || JSON.stringify(telegramResult)}`);
    }

    console.log('=== SUCCESS ===');
    return NextResponse.json({ 
      success: true, 
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' 
    });

  } catch (error) {
    console.error('=== ERROR ===');
    console.error('Error type:', error instanceof Error ? error.constructor.name : typeof error);
    console.error('Error message:', error instanceof Error ? error.message : String(error));
    console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace');
    
    let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    
    if (error instanceof Error) {
      if (error.name === 'AbortError') {
        errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
      } else if (error.message.includes('Telegram API error')) {
        errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
      } else if (error.message.includes('fetch')) {
        errorMessage = '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
      } else {
        errorMessage = error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞';
      }
    }
    
    return NextResponse.json(
      { 
        success: false, 
        message: errorMessage
      },
      { status: 500 }
    );
  }
} 