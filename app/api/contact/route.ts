import { NextRequest, NextResponse } from 'next/server';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
const TELEGRAM_BOT_TOKEN = '7974395055:AAEAjacUbgE6cq77I6h_PItbWLyCgbOx1cE';
const TELEGRAM_CHAT_ID = '-1002709982809'; // ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)

// –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
const translateOptions = (options: string[]): string => {
  const translations: { [key: string]: string } = {
    'mosquito': '–ú–æ—Å–∫–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞',
    'drain': '–û—Ç–ª–∏–≤',
    'sill': '–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫',
    'none': '–ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ',
    'description': '–û–ø–∏—Å–∞–Ω–∏–µ'
  };
  
  return options.map(option => translations[option] || option).join(", ");
};

export async function POST(request: NextRequest) {
  try {
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –≤—ã–≤–æ–¥–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    console.log('=== TELEGRAM SETTINGS ===');
    console.log('BOT_TOKEN:', TELEGRAM_BOT_TOKEN);
    console.log('CHAT_ID:', TELEGRAM_CHAT_ID);
    console.log('========================');

    const body = await request.json();
    const { name, phone, email, message, windows_configuration } = body;

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    let telegramMessage = `üîî *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞*\n\n`;
    
    if (name) telegramMessage += `üë§ *–ò–º—è:* ${name}\n`;
    if (phone) telegramMessage += `üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}\n`;
    if (email) telegramMessage += `üìß *Email:* ${email}\n`;
    if (message) telegramMessage += `üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:* ${message}\n`;
    
    if (windows_configuration) {
      // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
      let translatedConfiguration = windows_configuration;
      
      // –ó–∞–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ü–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–µ
      translatedConfiguration = translatedConfiguration.replace(/mosquito/g, '–ú–æ—Å–∫–∏—Ç–Ω–∞—è —Å–µ—Ç–∫–∞');
      translatedConfiguration = translatedConfiguration.replace(/drain/g, '–û—Ç–ª–∏–≤');
      translatedConfiguration = translatedConfiguration.replace(/sill/g, '–ü–æ–¥–æ–∫–æ–Ω–Ω–∏–∫');
      translatedConfiguration = translatedConfiguration.replace(/none/g, '–ù–∏—á–µ–≥–æ –∏–∑ –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ');
      
      telegramMessage += `\nüè† *–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–∫–æ–Ω:*\n${translatedConfiguration}\n`;
    }

    telegramMessage += `\n‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}`;

    console.log('=== SENDING MESSAGE ===');
    console.log('Message:', telegramMessage);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    const telegramResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: telegramMessage,
        parse_mode: 'Markdown',
      }),
    });

    const telegramResult = await telegramResponse.json();
    console.log('=== TELEGRAM RESPONSE ===');
    console.log('Status:', telegramResponse.status);
    console.log('Response:', JSON.stringify(telegramResult, null, 2));
    console.log('========================');

    if (!telegramResponse.ok) {
      throw new Error('Telegram API error: ' + JSON.stringify(telegramResult));
    }

    return NextResponse.json({ 
      success: true, 
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ –≤ Telegram –≥—Ä—É–ø–ø—É' 
    });

  } catch (error) {
    console.error('=== ERROR ===');
    console.error('Error sending message:', error);
    console.error('==================');
    
    const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    
    return NextResponse.json(
      { 
        success: false, 
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ' + errorMessage
      },
      { status: 500 }
    );
  }
} 